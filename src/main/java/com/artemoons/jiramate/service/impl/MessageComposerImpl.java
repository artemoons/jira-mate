package com.artemoons.jiramate.service.impl;

import com.artemoons.jiramate.dto.JiraResponse;
import com.artemoons.jiramate.dto.TodayDate;
import com.artemoons.jiramate.dto.WorktimeResponse;
import com.artemoons.jiramate.service.MessageComposer;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static com.artemoons.jiramate.service.impl.JiraQueryServiceImpl.getCurrentDate;

/**
 * @author <a href="mailto:github@eeel.ru">Artem Utkin</a>
 */
@Slf4j
@Component
public class MessageComposerImpl implements MessageComposer {

    /**
     * –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–µ–∫—É–Ω–¥ –≤ —á–∞—Å—ã.
     */
    public static final Double TO_HOURS = 3_600.0;

    /**
     * –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
     */
    @Value("${integration.jira.user-list}")
    private List<String> userList;

    /**
     * {@inheritDoc}
     */
    @Override
    public String prepareDailyMessage(final JiraResponse[] worklogHours, final WorktimeResponse worktimeResponse) {

        Map<String, Double> worklogData = initWorklogMap();
        populateWorklog(worklogData, worklogHours);

        int workHours = new BigDecimal(worktimeResponse.getWorkingTime() / TO_HOURS).intValue();

        LocalDate today = LocalDate.now();
        final String[] userWorklogInfo = {""};
        prepareMessageLines(worklogData, workHours, userWorklogInfo);

        return "ü§ñ –°–≤–æ–¥–∫–∞ –ø–æ –∑–∞–ø–∏—Å—è–º –æ —Ä–∞–±–æ—Ç–µ *–∑–∞ " + today.getDayOfMonth() + "\\/" + today.getMonthValue() + "\\/"
                + today.getYear() + " \\(" + workHours + " —á\\.\\)*:\n\n"
                + userWorklogInfo[0]
                + "\n‚Ü™ [–ü–µ—Ä–µ–π—Ç–∏ –≤ Jira](https://jira.cbr.ru/secure/Dashboard.jspa)";
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String prepareWeeklyMessage(final JiraResponse[] worklogHours, final WorktimeResponse worktimeResponse) {

        Map<String, Double> worklogData = initWorklogMap();
        populateWorklog(worklogData, worklogHours);

        int workHours = new BigDecimal(worktimeResponse.getWorkingTime() / TO_HOURS).intValue();

        final String[] userWorklogInfo = {""};
        prepareMessageLines(worklogData, workHours, userWorklogInfo);

        return "ü§ñ –°–≤–æ–¥–∫–∞ –ø–æ –∑–∞–ø–∏—Å—è–º –æ —Ä–∞–±–æ—Ç–µ *–∑–∞ –Ω–µ–¥–µ–ª—é*\\.\n\n"
                + "üïó –†–∞–±–æ—á–∏—Ö –¥–Ω–µ–π: " + worktimeResponse.getWorkingDays() + ", —á–∞—Å–æ–≤: " + workHours + "\\. \n\n"
                + userWorklogInfo[0]
                + "\n‚Ü™ [–ü–µ—Ä–µ–π—Ç–∏ –≤ Jira](https://jira.cbr.ru/secure/Dashboard.jspa)";

    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String prepareMonthlyMessage(final JiraResponse[] worklogHours, final WorktimeResponse worktimeResponse) {

        Map<String, Double> worklogData = initWorklogMap();
        populateWorklog(worklogData, worklogHours);

        int workHours = new BigDecimal(worktimeResponse.getWorkingTime() / TO_HOURS).intValue();

        final String[] userWorklogInfo = {""};
        prepareMessageLines(worklogData, workHours, userWorklogInfo);

        String periodString = getPeriodString();
        return "ü§ñ –°–≤–æ–¥–∫–∞ –ø–æ –∑–∞–ø–∏—Å—è–º –æ —Ä–∞–±–æ—Ç–µ \n *–∑–∞ –º–µ—Å—è—Ü " + periodString + "*:\n\n"
                + "üïó –†–∞–±–æ—á–∏—Ö –¥–Ω–µ–π: " + worktimeResponse.getWorkingDays() + ", —á–∞—Å–æ–≤: " + workHours + "\\. \n\n"
                + userWorklogInfo[0]
                + "\n‚Ü™ [–ü–µ—Ä–µ–π—Ç–∏ –≤ Jira](https://jira.cbr.ru/secure/Dashboard.jspa)";

    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
     *
     * @param worklogData  –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     * @param worklogHours —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
     */
    private void populateWorklog(final Map<String, Double> worklogData, final JiraResponse[] worklogHours) {
        for (JiraResponse item : worklogHours) {
            String worklogAuthor = item.getWorklogAuthor();
            if (worklogData.containsKey(worklogAuthor)) {
                Double previousWorklog = worklogData.get(worklogAuthor);
                worklogData.put(worklogAuthor, previousWorklog + item.getTimeSpentSeconds());
            } else {
                worklogData.put(worklogAuthor, item.getTimeSpentSeconds());
            }
        }
        updateNames(worklogData);
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º—ë–Ω.
     *
     * @param worklogData –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –∏–º–µ–Ω–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
     */
    private void updateNames(final Map<String, Double> worklogData) {
        Map<String, Double> tempWorklogData = new HashMap<>();
        List<String> replacementMap = userList.stream().filter(name -> name.contains("/")).collect(Collectors.toList());
        Map<String, String> replacementDictionary = new HashMap<>();
        replacementMap.forEach(item -> {
            replacementDictionary.put(item.replaceAll(".?[^/]*$", ""),
                    item.replaceAll("^[^/]*.", ""));
        });

        worklogData.forEach((k, v) -> {
            tempWorklogData.put(replacementDictionary.getOrDefault(k, k), v);
        });

        worklogData.clear();
        worklogData.putAll(tempWorklogData);
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –∑–∞—Å–ø–∏–µ–π –æ —Ä–∞–±–æ—Ç–µ.
     *
     * @return –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
     */
    private Map<String, Double> initWorklogMap() {
        Map<String, Double> worklogData = new Hashtable<>();
        getUserNames().forEach(userName -> worklogData.put(userName, 0.0));
        return worklogData;
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–∏–≥–æ–¥–Ω—ã—Ö –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Jira.
     *
     * @return –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    private List<String> getUserNames() {
        // ^[^/]* before
        // .?[^/]*$ after
        List<String> users = new ArrayList<>(userList);
        int i = 0;
        String newValue = "null";
        for (String item : users) {
            if (item.contains("/")) {
                newValue = item.replaceAll(".?[^/]*$", "");
                users.set(i, newValue);
            }
            i++;
        }
        return users;
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å—Ç—Ä–æ–∫–∏ –æ —Ä–∞–±–æ—Ç–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
     *
     * @param worklogData     –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ
     * @param workingHours    –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Å–∞—Ö —Ä–∞–±–æ—Ç—ã
     * @param userWorklogInfo –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private static void prepareMessageLines(final Map<String, Double> worklogData,
                                            final int workingHours,
                                            final String[] userWorklogInfo) {
        worklogData.forEach((key, value) -> {
            Double timeInHours = value / TO_HOURS;
            log.info("{} - {}", key, timeInHours);

            String emojiIcon = "‚úÖ";
            if (value == 0 || timeInHours < workingHours) {
                emojiIcon = "‚ùå";
            }
            userWorklogInfo[0] = userWorklogInfo[0].concat(String.format(emojiIcon + " %s \\- %.2f —á\\. \n",
                    key,
                    timeInHours));
        });
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏.
     *
     * @return —Å—Ç—Ä–æ–∫–∞
     */
    private static String getPeriodString() {
        TodayDate currentDate = getCurrentDate();
        int day = currentDate.getDay();
        int month = currentDate.getMonth();
        int year = currentDate.getYear();
        return "\\(c 1\\-" + month + "\\-" + year + " –ø–æ " + day + "\\-" + month + "\\-" + year + "\\)";
    }
}
